'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Rainbow = function (_React$Component) {
  _inherits(Rainbow, _React$Component);

  function Rainbow() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Rainbow);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Rainbow.__proto__ || Object.getPrototypeOf(Rainbow)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      color: _this.props.initial,
      index: 0
    }, _this.switchColor = function () {
      if (!_this.props.colors) {
        _this.setState({
          color: '#' + Math.random().toString(16).slice(-6)
        });
      } else if (_this.props.ordered) {
        var nextIndex = 0;
        if (_this.state.index < _this.props.colors.length - 1) {
          nextIndex = _this.state.index + 1;
        }
        _this.setState({
          color: _this.props.colors[nextIndex],
          index: nextIndex
        });
      } else {
        var _nextIndex = 0;
        while (_nextIndex == _this.state.index) {
          _nextIndex = Math.floor(Math.random() * _this.props.colors.length - 1 + 1);
        }
        _this.setState({
          color: _this.props.colors[_nextIndex],
          index: _nextIndex
        });
      }
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Rainbow, [{
    key: 'render',
    value: function render() {
      if (!this.props.children) {
        return null;
      }
      return this.props.children(this.state.color, this.switchColor);
    }
  }]);

  return Rainbow;
}(_react2.default.Component);

Rainbow.propTypes = {
  children: _propTypes2.default.func,
  colors: _propTypes2.default.arrayOf(_propTypes2.default.string),
  ordered: _propTypes2.default.bool,
  initial: _propTypes2.default.string
};
Rainbow.defaultProps = {
  initial: '#000000',
  ordered: false
};
exports.default = Rainbow;